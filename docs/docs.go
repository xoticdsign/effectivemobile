// Package docs GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Епишов Роман",
            "url": "https://github.com/xoticdsign",
            "email": "xoticdollarsign@outlook.com"
        },
        "license": {
            "name": "MIT",
            "url": "https://mit-license.org/"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/create": {
            "post": {
                "description": "Создает новую запись с автозаполнением возраста, пола и национальности при помощи открытых API.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Операции"
                ],
                "summary": "Создание записи",
                "operationId": "create",
                "parameters": [
                    {
                        "description": "Тело запроса",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.CreateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращается, если создание прошло успешно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.CreateResponse"
                        }
                    },
                    "400": {
                        "description": "Возвращается, если запрос был сформирован неправильно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Возвращается, если запрашиваемая запись не была найдена/во внешних API нет данных",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Возвращается, если был использован неправильный метод",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Возвращается, если во время работы хранилища/клиента произошла ошибка",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/delete/{id}": {
            "delete": {
                "description": "Удаляет запись из базы данных по заданному идентификатору.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Операции"
                ],
                "summary": "Удаление записи по ID",
                "operationId": "delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Идентификатор записи",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращается, если удаление прошло успешно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.DeleteByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Возвращается, если запрос был сформирован неправильно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Возвращается, если запрашиваемая запись не была найдена",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Возвращается, если был использован неправильный метод",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Возвращается, если во время работы хранилища произошла ошибка",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/select": {
            "get": {
                "description": "Возвращает запись/список записей с возможностью фильтрации и пагинации.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Операции"
                ],
                "summary": "Получение записи(ей)",
                "operationId": "select",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Идентификатор записи",
                        "name": "id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Тип фильтра (name, surname, etc.)",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Значение фильтра",
                        "name": "value",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Начальная позиция",
                        "name": "start",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Конечная позиция",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращается, если получение прошло успешно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.SelectResponse"
                        }
                    },
                    "400": {
                        "description": "Возвращается, если запрос был сформирован неправильно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Возвращается, если запрашиваемая запись(и) не была найдена",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Возвращается, если был использован неправильный метод",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Возвращается, если во время работы хранилища произошла ошибка",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/update/{id}": {
            "put": {
                "description": "Обновляет существующую записи в базе данных по ID при помощи данных получаемых в теле запроса.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Операции"
                ],
                "summary": "Обновление записи по ID",
                "operationId": "update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Идентификатор записи",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Тело запроса",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.UpdateByIDRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Возвращается, если обновление прошло успешно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.UpdateByIDResponse"
                        }
                    },
                    "400": {
                        "description": "Возвращается, если запрос был сформирован неправильно",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Возвращается, если запрашиваемая запись не была найдена",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Возвращается, если был использован неправильный метод",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Возвращается, если переданные данные ничем не отличаются от уже существующих",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Возвращается, если во время работы хранилища произошла ошибка",
                        "schema": {
                            "$ref": "#/definitions/effectivemobile.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "effectivemobile.CreateRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "effectivemobile.CreateResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "effectivemobile.DeleteByIDResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "effectivemobile.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "effectivemobile.SelectResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "result": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/postgresql.Row"
                    }
                }
            }
        },
        "effectivemobile.UpdateByIDRequest": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "effectivemobile.UpdateByIDResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "postgresql.Row": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "EffectiveMobile",
	Description:      "Сервис предоставляет API для создания, обновления, удаления и поиска людей с автозаполнением данных на основе внешних сервисов.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
